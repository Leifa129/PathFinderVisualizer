{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/GraphHelper.js","Algorithms/HeuristicSearch.js","Algorithms/Dijkstra.js","Algorithms/GreedyBestFirstSearch.js","Algorithms/BFS.js","Algorithms/AlgorithmController.js","Algorithms/AStar.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","weight","isWall","onMouseDown","onMouseEnter","onMouseUp","row","isVisited","extraClassName","id","className","document","getElementById","Component","GraphHelper","node","grid","neighbors","push","length","filter","neighbor","nodes","unvisitedNodes","sort","nodeA","nodeB","distance","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","HeuristicSearch","startNode","visitedNodesInOrder","fScore","getAllNodes","sortNodesByFScore","closestNode","shift","Infinity","updateUnvisitedNeighbors","dRow","dCol","Math","abs","unvisitedNeighbors","getUnvisitedNeighbors","temp","heuristic","Dijkstra","GreedyBestFirstSearch","BFS","AlgorithmController","algorithm","search","aStar","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","timers","shortestPathTimers","state","mouseIsPressed","startSelected","finishSelected","ranAlgorithm","selectedAlgorithm","speed","getInitialGrid","setState","clearTimers","newGrid","getNewGridWithWallToggled","visualizeInstantAlgorithm","prevStartNodeRow","prevStartNodeCol","prevFinishNodeRow","prevFinishNodeCol","handleStartChanged","handleFinishChanged","i","clearTimeout","setTimeout","animateShortestPath","getSpeed","animateInstantShortestPath","multiplier","clearGrid","resetGrid","runAlgorithm","getNodesInShortestPathOrder","animateSearchSpace","slice","j","random","round","animateInstantAlgorithm","style","backgroundColor","flexGrow","value","onChange","event","target","onClick","visualizeAlgorithm","generateWeights","clearBoard","width","maxWidth","Dropdown","Toggle","variant","Menu","Item","setSpeed","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.affe5582.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      weight,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                : '';\r\n\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={isVisited ? document.getElementById(`node-${row}-${col}`).className : `node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>{ weight > 1 ? weight : ''}&nbsp; </div>\r\n    );\r\n  }\r\n}","export default class GraphHelper {\r\n\r\n    static getUnvisitedNeighbors(node, grid) {\r\n        const neighbors = [];\r\n        const {col, row} = node;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    static getAllNodes(grid){\r\n        const nodes = [];\r\n        for(const row of grid){\r\n            for(const node of row){\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    static sortNodesByDistance(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\n// This class implements A*, but also leaves methods that can be overridden in order to implement other algorithms that relies on heuristics.\r\nexport default class HeuristicSearch {\r\n    search(grid, startNode, finishNode) {\r\n        const visitedNodesInOrder = [];\r\n\r\n        startNode.distance = 0;\r\n        startNode.fScore = 0;\r\n\r\n        const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n        while (!!unvisitedNodes.length) {\r\n            this.sortNodesByFScore(unvisitedNodes);\r\n            const closestNode = unvisitedNodes.shift();\r\n            // If we encounter a wall, we skip it.\r\n            if (closestNode.isWall) continue;\r\n            // If the closest node is at a distance of infinity,\r\n            // we must be trapped and should therefore stop.\r\n            if (closestNode.fScore === Infinity) return visitedNodesInOrder;\r\n            closestNode.isVisited = true;\r\n            visitedNodesInOrder.push(closestNode);\r\n            if (closestNode === finishNode) {\r\n                return visitedNodesInOrder;\r\n            }\r\n\r\n            this.updateUnvisitedNeighbors(closestNode, finishNode, grid);\r\n        }\r\n    }\r\n    sortNodesByFScore(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) =>\r\n        {\r\n            // This is a tie breaker if both scores are equal we should priorities the path with the most progress.\r\n            if(nodeA.fScore - nodeB.fScore === 0){\r\n                return nodeB.distance - nodeA.distance;\r\n            }\r\n            return nodeA.fScore - nodeB.fScore;\r\n        });\r\n    }\r\n\r\n    // Default manhattan distance\r\n   heuristic(startNode, finishNode){\r\n        const dRow =  startNode.row - finishNode.row;\r\n        const dCol =  startNode.col - finishNode.col;\r\n        return Math.abs(dRow) + Math.abs(dCol);\r\n    }\r\n\r\n   updateUnvisitedNeighbors(node, finishNode, grid){\r\n        const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const temp = node.distance + neighbor.weight;\r\n            if ( temp < neighbor.distance) {\r\n                neighbor.distance = temp;\r\n                neighbor.fScore = temp + this.heuristic(neighbor, finishNode);\r\n                neighbor.previousNode = node;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import GraphHelper from \"./GraphHelper\";\r\nimport HeuristicSearch from \"./HeuristicSearch\";\r\n\r\n\r\n// Dijkstras is infact a special case of A* algorithm where heuristic = 0. In other words, we only rely on the distance from the start node.\r\nexport default class Dijkstra extends HeuristicSearch {\r\n\r\n    updateUnvisitedNeighbors(node, finishNode, grid) {\r\n        const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const temp = node.fScore + neighbor.weight;\r\n            if (temp < neighbor.fScore) {\r\n                neighbor.fScore = temp;\r\n                neighbor.previousNode = node;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n","import GraphHelper from \"./GraphHelper\";\r\nimport HeuristicSearch from './HeuristicSearch';\r\n\r\nexport default class GreedyBestFirstSearch extends HeuristicSearch{\r\n\r\n    bestFirstSearch(grid, startNode, finishNode){\r\n        return super.search(grid, startNode, finishNode);\r\n    }\r\n\r\n\r\n    sortNodesByFScore(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.fScore - nodeB.fScore);\r\n    }\r\n\r\n    updateUnvisitedNeighbors(node, finishNode, grid){\r\n        const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            //const temp = neighbor.weight + super.heuristic(neighbor, finishNode) - 1;\r\n            const temp = super.heuristic(neighbor, finishNode);\r\n            if ( temp < neighbor.fScore) {\r\n                neighbor.fScore = temp;\r\n                neighbor.previousNode = node;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import GraphHelper from \"./GraphHelper\";\r\nimport HeuristicSearch from \"./HeuristicSearch\";\r\n\r\n// Breadth-first search is just a special case of dijkstras where all of the edges have the same cost.\r\n// Here we will use the cost of 1 for all edges.\r\nexport default class BFS extends HeuristicSearch {\r\n\r\n        updateUnvisitedNeighbors(node, finishNode, grid) {\r\n                const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n                for (const neighbor of unvisitedNeighbors) {\r\n                        const temp = node.fScore + 1;\r\n                        if (temp < neighbor.fScore) {\r\n                                neighbor.fScore = temp;\r\n                                neighbor.previousNode = node;\r\n                        }\r\n                }\r\n\r\n        }\r\n\r\n}\r\n\r\n","import Dijkstra from '../Algorithms/Dijkstra';\r\nimport {aStar} from '../Algorithms/AStar';\r\nimport GreedyBestFirstSearch from \"./GreedyBestFirstSearch\";\r\nimport BFS from './BFS';\r\nexport default class AlgorithmController {\r\n\r\n    static runAlgorithm(grid, startNode, finishNode, algorithm){\r\n        switch(algorithm){\r\n            case 'dijkstra':\r\n               return new Dijkstra().search(grid, startNode, finishNode);\r\n\r\n            case 'aStar':\r\n                return aStar(grid, startNode, finishNode);\r\n\r\n            case 'greedyBestFirstSearch':\r\n                return new GreedyBestFirstSearch().search(grid, startNode, finishNode);\r\n\r\n            case 'breadthFirstSearch':\r\n                return new BFS().search(grid, startNode, finishNode);\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n}","import HeuristicSearch from \"./HeuristicSearch\";\r\n      // Base implementation of HeuristicSearch is A* so we dont need to do anything.\r\nexport function aStar(grid, startNode, finishNode) {\r\n   return (new HeuristicSearch()).search(grid, startNode, finishNode);\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './PathFindingVisualizer.css';\r\nimport AlgorithmController from '../Algorithms/AlgorithmController';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\nlet startNodeRow = 10;\r\nlet startNodeCol = 15;\r\nlet finishNodeRow = 10;\r\nlet finishNodeCol = 35;\r\nconst NUMBER_OF_ROWS = 20;\r\nconst NUMBER_OF_COLS = 50;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            startSelected: false,\r\n            finishSelected: false,\r\n            ranAlgorithm: false,\r\n            selectedAlgorithm: 'dijkstra',\r\n            speed: 'Normal',\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n\r\n    handleMouseDown(row, col) {\r\n        this.clearTimers();\r\n\r\n        if (startNodeCol === col && startNodeRow === row) {\r\n            this.setState({startSelected: true, mouseIsPressed: true});\r\n            return;\r\n        }\r\n        if (finishNodeCol === col && finishNodeRow === row) {\r\n            this.setState({finishSelected: true, mouseIsPressed: true});\r\n            return;\r\n        }\r\n\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n        if (this.state.ranAlgorithm)\r\n            this.visualizeInstantAlgorithm();\r\n\r\n    }\r\n\r\n    handleStartChanged(row, col) {\r\n        const prevStartNodeRow = startNodeRow;\r\n        const prevStartNodeCol = startNodeCol;\r\n        const {grid} = this.state;\r\n        if (grid[row][col].isWall)\r\n            return;\r\n\r\n        startNodeRow = row;\r\n        startNodeCol = col;\r\n\r\n        grid[prevStartNodeRow][prevStartNodeCol].isStart = false;\r\n        grid[startNodeRow][startNodeCol].isStart = true;\r\n\r\n\r\n        this.setState({grid: grid});\r\n\r\n        if (this.state.ranAlgorithm) {\r\n            this.visualizeInstantAlgorithm();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleFinishChanged(row, col) {\r\n        const prevFinishNodeRow = finishNodeRow;\r\n        const prevFinishNodeCol = finishNodeCol;\r\n        const {grid} = this.state;\r\n        if (grid[row][col].isWall)\r\n            return;\r\n        finishNodeRow = row;\r\n        finishNodeCol = col;\r\n\r\n\r\n        grid[prevFinishNodeRow][prevFinishNodeCol].isFinish = false;\r\n        grid[finishNodeRow][finishNodeCol].isFinish = true;\r\n\r\n        this.setState({grid: grid});\r\n\r\n        if (this.state.ranAlgorithm) {\r\n            this.visualizeInstantAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n\r\n        const {grid, ranAlgorithm} = this.state;\r\n\r\n        if (this.state.startSelected) {\r\n            this.handleStartChanged(row, col);\r\n            return;\r\n        }\r\n\r\n        if (this.state.finishSelected) {\r\n            this.handleFinishChanged(row, col);\r\n            return;\r\n        }\r\n\r\n        // Make sure that we dont put a wall over the start or finish node\r\n        if (!(row === startNodeRow && col == startNodeCol) && !(row === finishNodeRow && col === finishNodeCol)) {\r\n            const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n            this.setState({grid: newGrid});\r\n\r\n            if (ranAlgorithm) {\r\n                this.visualizeInstantAlgorithm();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false, startSelected: false, finishSelected: false});\r\n    }\r\n\r\n    timers = [];\r\n    shortestPathTimers = [];\r\n\r\n    clearTimers(){\r\n        for(let i = 0; i < this.timers.length; i++){\r\n            clearTimeout(this.timers[i]);\r\n        }\r\n        for(let i = 0; i < this.shortestPathTimers.length; i++){\r\n            clearTimeout(this.shortestPathTimers[i]);\r\n        }\r\n\r\n        this.timers = [];\r\n        this.shortestPathTimers = [];\r\n    }\r\n\r\n    animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        this.clearTimers();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n                if (i === visitedNodesInOrder.length) {\r\n                    this.timers.push(setTimeout(() => {\r\n                        this.animateShortestPath(nodesInShortestPathOrder);\r\n                    }, 10 * i * this.getSpeed()));\r\n                    return;\r\n                }\r\n                this.timers.push(setTimeout(() => {\r\n                    const node = visitedNodesInOrder[i];\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                        'node node-visited';\r\n                }, 10 * i * this.getSpeed()));\r\n        }\r\n    }\r\n\r\n    animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                this.animateInstantShortestPath(nodesInShortestPathOrder);\r\n                return;\r\n            }\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node visitedInstant';\r\n\r\n        }\r\n    }\r\n\r\n    animateInstantShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-instant-shortest-path';\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n              this.shortestPathTimers.push(setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n            }, 50 * i * this.getSpeed()));\r\n        }\r\n    }\r\n\r\n    getSpeed() {\r\n        let multiplier = 1.0;\r\n        const {speed} = this.state;\r\n\r\n        if (speed === 'Fast')\r\n            multiplier = 0.5;\r\n\r\n        if (speed === 'Slow')\r\n            multiplier = 2;\r\n\r\n        return multiplier;\r\n\r\n    }\r\n\r\n    visualizeAlgorithm() {\r\n        const {grid, selectedAlgorithm} = this.state;\r\n        clearGrid(grid);\r\n        const newGrid = resetGrid(grid);\r\n        const startNode = newGrid[startNodeRow][startNodeCol];\r\n        const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n\r\n        const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n        const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n        this.animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        this.setState({ranAlgorithm: true});\r\n    }\r\n\r\n    generateWeights() {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i < NUMBER_OF_ROWS; i++) {\r\n            for (let j = 0; j < NUMBER_OF_COLS; j++) {\r\n                if (Math.random() < 0.1) {\r\n                    newGrid[i][j].weight = Math.round(1 + Math.random() * 8);\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: newGrid});\r\n\r\n    }\r\n\r\n    visualizeInstantAlgorithm() {\r\n        const {grid, selectedAlgorithm} = this.state;\r\n        clearGrid(grid);\r\n        const newGrid = resetGrid(grid)\r\n\r\n        const startNode = newGrid[startNodeRow][startNodeCol];\r\n        const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n        const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n        const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n        this.animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    clearBoard() {\r\n        const grid = getInitialGrid();\r\n        const ranAlgorithm = false;\r\n        this.setState({grid, ranAlgorithm});\r\n        this.clearTimers();\r\n        clearGrid(grid);\r\n\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.setState({speed});\r\n    }\r\n\r\n    render() {\r\n        const {grid, mouseIsPressed, selectedAlgorithm} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"header\" style={{backgroundColor: 'gray'}}>\r\n                    <div className=\"item form-group\" style={{flexGrow: 2}}>\r\n                        <select className=\"form-control w-50 mt-3   float-right \" value={selectedAlgorithm}\r\n                                onChange={event => {\r\n                                    this.setState({selectedAlgorithm: event.target.value})\r\n                                }}\r\n                                id=\"selectedAlgorithm\">\r\n                            <option value=\"dijkstra\">Dijkstra's algorithm</option>\r\n                            <option value=\"aStar\">A* algorithm</option>\r\n                            <option value=\"greedyBestFirstSearch\">Greedy Best-first Search</option>\r\n                            <option value=\"breadthFirstSearch\">Breadth-first Search</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-success ml-3 mt-3 float-left\"\r\n                                onClick={() => this.visualizeAlgorithm()}>\r\n                            Visualize Algorithm\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-primary mr-3 mt-3 float-right\"\r\n                                onClick={() => this.generateWeights()}>Generate weights\r\n                        </button>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-danger mt-3 mr-5\" onClick={() => this.clearBoard()}>\r\n                            Clear board\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"item mt-3 ml-5\" style={{width: '200px', maxWidth: '200px'}}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n                                Speed: {this.state.speed}\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"bg-dark\">\r\n                                <Dropdown.Item className=\"text-danger\"\r\n                                               onClick={() => this.setSpeed('Fast')}>Fast</Dropdown.Item>\r\n                                <Dropdown.Item className=\"text-success\"\r\n                                               onClick={() => this.setSpeed('Normal')}>Normal</Dropdown.Item>\r\n                                <Dropdown.Item className=\"text-primary\"\r\n                                               onClick={() => this.setSpeed('Slow')}>Slow</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"d-flex justify-content-center p-2\">\r\n                    <div className=\"node node-start  mr-2\"></div>\r\n                    <div>Start Node</div>\r\n\r\n                    <div className=\"node node-finish ml-5 mr-2\"></div>\r\n                    <div>Finish Node</div>\r\n\r\n                    <div className=\"node node-instant-shortest-path ml-5 mr-2\"></div>\r\n                    <div>Shortest-path Node</div>\r\n\r\n                    <div className=\"node ml-5 mr-2\"></div>\r\n                    <div>Unvisited Node</div>\r\n\r\n                    <div className=\"node ml-5 mr-2\" style={{backgroundColor: 'rgba(0, 190, 218, 0.75)'}}></div>\r\n                    <div>Visited Node</div>\r\n\r\n                    <div className=\"node node-wall ml-5 mr-2\"></div>\r\n                    <div>Wall Node</div>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col, isFinish, isStart, isWall, weight, isVisited} = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            weight={weight}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            isVisited={isVisited}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                            row={row}></Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n    const isStart = row === startNodeRow && col === startNodeCol;\r\n    const isFinish = row === finishNodeRow && col === finishNodeCol;\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: isStart,\r\n        isFinish: isFinish,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        weight: 1,\r\n        fScore: Infinity,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n\r\n\r\nconst resetGrid = grid => {\r\n    const newGrid = grid.slice();\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            newGrid[row][col].distance = Infinity;\r\n            newGrid[row][col].fScore = Infinity;\r\n            newGrid[row][col].previousNode = null;\r\n            newGrid[row][col].isVisited = false;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nconst clearGrid = grid => {\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            let className = 'node';\r\n\r\n            if (row === startNodeRow && col === startNodeCol)\r\n                className = 'node node-start';\r\n\r\n            if (row === finishNodeRow && col === finishNodeCol)\r\n                className = 'node node-finish';\r\n\r\n            if (grid[row][col].isWall) {\r\n                className = 'node node-wall';\r\n            }\r\n\r\n\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n                className;\r\n        }\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <PathFindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}