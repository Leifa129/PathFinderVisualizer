{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/GraphHelper.js","Algorithms/HeuristicSearch.js","Algorithms/Dijkstra.js","Algorithms/GreedyBestFirstSearch.js","Algorithms/BFS.js","Algorithms/AlgorithmController.js","Algorithms/AStar.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","weight","isWall","onMouseDown","onMouseEnter","onMouseUp","row","isVisited","extraClassName","id","className","document","getElementById","Component","GraphHelper","node","grid","diagonalMovement","neighbors","topIsWall","leftIsWall","bottomIsWall","rightIsWall","push","length","filter","neighbor","nodes","unvisitedNodes","sort","nodeA","nodeB","distance","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","HeuristicSearch","startNode","visitedNodesInOrder","fScore","getAllNodes","sortNodesByFScore","closestNode","shift","Infinity","updateUnvisitedNeighbors","dRow","Math","abs","dCol","D","SQRT2","unvisitedNeighbors","getUnvisitedNeighbors","temp","heuristic","Dijkstra","GreedyBestFirstSearch","BFS","AlgorithmController","algorithm","allowDiagonals","search","aStar","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","timers","shortestPathTimers","state","mouseIsPressed","startSelected","finishSelected","ranAlgorithm","selectedAlgorithm","speed","getInitialGrid","setState","clearTimers","newGrid","getNewGridWithWallToggled","visualizeInstantAlgorithm","prevStartNodeRow","prevStartNodeCol","prevFinishNodeRow","prevFinishNodeCol","handleStartChanged","handleFinishChanged","i","clearTimeout","setTimeout","animateShortestPath","getSpeed","animateInstantShortestPath","multiplier","clearGrid","resetGrid","runAlgorithm","getNodesInShortestPathOrder","animateSearchSpace","slice","j","random","round","prevState","animateInstantAlgorithm","style","backgroundColor","flexGrow","value","onChange","event","target","htmlFor","userSelect","fontSize","width","height","type","diagonalMovementsChanged","onClick","visualizeAlgorithm","generateWeights","clearBoard","maxWidth","Dropdown","Toggle","variant","Menu","Item","setSpeed","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f0117aa.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      weight,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                : '';\r\n\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={isVisited ? document.getElementById(`node-${row}-${col}`).className : `node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>{ weight > 1 ? weight : ''}&nbsp; </div>\r\n    );\r\n  }\r\n}","export default class GraphHelper {\r\n\r\n    static getUnvisitedNeighbors(node, grid, diagonalMovement) {\r\n        const neighbors = [];\r\n        const {col, row} = node;\r\n        let topIsWall = true;\r\n        let leftIsWall = true;\r\n        let bottomIsWall = true;\r\n        let rightIsWall = true;\r\n        if (row > 0) {\r\n            bottomIsWall = grid[row - 1][col].isWall;\r\n            neighbors.push(grid[row - 1][col]);\r\n        }\r\n        if (row < grid.length - 1) {\r\n            topIsWall = grid[row + 1][col].isWall;\r\n            neighbors.push(grid[row + 1][col]);\r\n        }\r\n        if (col > 0) {\r\n            leftIsWall = grid[row][col - 1].isWall;\r\n            neighbors.push(grid[row][col - 1]);\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n            rightIsWall = grid[row][col + 1].isWall;\r\n            neighbors.push(grid[row][col + 1]);\r\n        }\r\n\r\n        if(!diagonalMovement)\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n\r\n        // Doing checks to avoid that the algorithm is cutting corners or jumping through walls diagonally\r\n        if (row > 0 && col > 0)\r\n            if(!leftIsWall || !bottomIsWall)\r\n            neighbors.push(grid[row - 1][col - 1]);\r\n        if (row < grid.length - 1 && col < grid[0].length - 1)\r\n            if(!rightIsWall || !topIsWall)\r\n            neighbors.push(grid[row + 1][col + 1]);\r\n        if (row < grid.length - 1 && col > 0)\r\n            if(!topIsWall || !leftIsWall)\r\n            neighbors.push(grid[row + 1][col - 1]);\r\n        if (row > 0 && col < grid[0].length - 1)\r\n            if(!bottomIsWall || !rightIsWall)\r\n            neighbors.push(grid[row - 1][col + 1]);\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    static getAllNodes(grid){\r\n        const nodes = [];\r\n        for(const row of grid){\r\n            for(const node of row){\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    static sortNodesByDistance(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\n// This class implements A*, but also leaves methods that can be overridden in order to implement other algorithms that relies on heuristics.\r\n// Could use a heap for better performances, but for visualization purposes it makes no difference.\r\nexport default class HeuristicSearch {\r\n    diagonalMovement = false;\r\n\r\n    search(grid, startNode, finishNode, diagonalMovement) {\r\n        const visitedNodesInOrder = [];\r\n        startNode.distance = 0;\r\n        startNode.fScore = 0;\r\n        this.diagonalMovement = diagonalMovement;\r\n\r\n        const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n        while (!!unvisitedNodes.length) {\r\n            this.sortNodesByFScore(unvisitedNodes);\r\n            const closestNode = unvisitedNodes.shift();\r\n            // If we encounter a wall, we skip it.\r\n            if (closestNode.isWall) continue;\r\n            // If the closest node is at a distance of infinity,\r\n            // we must be trapped and should therefore stop.\r\n            if (closestNode.fScore === Infinity) return visitedNodesInOrder;\r\n            closestNode.isVisited = true;\r\n            visitedNodesInOrder.push(closestNode);\r\n            if (closestNode === finishNode) {\r\n                return visitedNodesInOrder;\r\n            }\r\n\r\n            this.updateUnvisitedNeighbors(closestNode, finishNode, grid);\r\n        }\r\n    }\r\n    sortNodesByFScore(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) =>\r\n        {\r\n            // This is a tie breaker if both scores are equal we should priorities the path with the most progress.\r\n            if(nodeA.fScore - nodeB.fScore === 0){\r\n                return nodeB.distance - nodeA.distance;\r\n            }\r\n            return nodeA.fScore - nodeB.fScore;\r\n        });\r\n    }\r\n\r\n\r\n    heuristic(node, finishNode){\r\n        const dRow =  Math.abs(node.row - finishNode.row);\r\n        const dCol =  Math.abs(node.col - finishNode.col);\r\n        if(!this.diagonalMovement)\r\n            return dRow + dCol;\r\n\r\n        const D = Math.SQRT2 - 1;\r\n        return (dCol < dRow)  ?  (D * dCol + dRow) : (D * dRow + dCol);\r\n    }\r\n\r\n    updateUnvisitedNeighbors(node, finishNode, grid){\r\n        const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid, this.diagonalMovement);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            // Weighted currently not supported with diagonal movements.\r\n            const temp = node.distance +\r\n                (this.diagonalMovement ?\r\n                    ((neighbor.col - node.col === 0 || neighbor.row - node.row === 0 ) ? 1 : Math.SQRT2)\r\n                    : node.weight);\r\n            if ( temp < neighbor.distance) {\r\n                neighbor.distance = temp;\r\n                neighbor.fScore = temp + this.heuristic(neighbor, finishNode);\r\n                neighbor.previousNode = node;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import HeuristicSearch from \"./HeuristicSearch\";\r\n\r\n\r\n// Dijkstras is infact a special case of A* algorithm where heuristic = 0. In other words, we only rely on the distance from the start node.\r\nexport default class Dijkstra extends HeuristicSearch {\r\n\r\n    heuristic(startNode, finishNode, diagonalMovement) {\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n","import HeuristicSearch from './HeuristicSearch';\r\n\r\nexport default class GreedyBestFirstSearch extends HeuristicSearch{\r\n\r\n\r\n    heuristic(neighbor, finishNode){\r\n        return super.heuristic(neighbor, finishNode) * 1000000;\r\n}\r\n\r\n\r\n}\r\n","import GraphHelper from \"./GraphHelper\";\r\nimport HeuristicSearch from \"./HeuristicSearch\";\r\n\r\n// Breadth-first search is just a special case of dijkstras where all of the edges have the same cost.\r\n// Here we will use the cost of 1 for all edges.\r\n// Although with BFS we dont need to use a priorityque, a normal que would suffice making it more efficient\r\n// However for visualization purposes it makes no difference.\r\nexport default class BFS extends HeuristicSearch {\r\n\r\n        updateUnvisitedNeighbors(node, finishNode, grid) {\r\n                const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid, this.diagonalMovement);\r\n                for (const neighbor of unvisitedNeighbors) {\r\n                        const temp = node.fScore + (this.diagonalMovement ?\r\n                            ((neighbor.col - node.col === 0 || neighbor.row - node.row === 0 ) ? 1 : Math.SQRT2)\r\n                            : 1);\r\n                        if (temp < neighbor.fScore) {\r\n                                neighbor.fScore = temp;\r\n                                neighbor.previousNode = node;\r\n                        }\r\n                }\r\n\r\n        }\r\n\r\n}\r\n\r\n","import Dijkstra from '../Algorithms/Dijkstra';\r\nimport {aStar} from '../Algorithms/AStar';\r\nimport GreedyBestFirstSearch from \"./GreedyBestFirstSearch\";\r\nimport BFS from './BFS';\r\nexport default class AlgorithmController {\r\n\r\n    static runAlgorithm(grid, startNode, finishNode, algorithm, allowDiagonals){\r\n        switch(algorithm){\r\n            case 'dijkstra':\r\n               return new Dijkstra().search(grid, startNode, finishNode, allowDiagonals);\r\n\r\n            case 'aStar':\r\n                return aStar(grid, startNode, finishNode, allowDiagonals);\r\n\r\n            case 'greedyBestFirstSearch':\r\n                return new GreedyBestFirstSearch().search(grid, startNode, finishNode, allowDiagonals);\r\n\r\n            case 'breadthFirstSearch':\r\n                return new BFS().search(grid, startNode, finishNode, allowDiagonals);\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n}","import HeuristicSearch from \"./HeuristicSearch\";\r\n      // Base implementation of HeuristicSearch is A* so we dont need to do anything.\r\nexport function aStar(grid, startNode, finishNode, diagonalMovement) {\r\n   return (new HeuristicSearch()).search(grid, startNode, finishNode, diagonalMovement);\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './PathFindingVisualizer.css';\r\nimport AlgorithmController from '../Algorithms/AlgorithmController';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\nlet startNodeRow = 10;\r\nlet startNodeCol = 15;\r\nlet finishNodeRow = 10;\r\nlet finishNodeCol = 35;\r\nconst NUMBER_OF_ROWS = 20;\r\nconst NUMBER_OF_COLS = 50;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            startSelected: false,\r\n            finishSelected: false,\r\n            ranAlgorithm: false,\r\n            selectedAlgorithm: 'dijkstra',\r\n            allowDiagonals: false,\r\n            speed: 'Normal',\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n\r\n    handleMouseDown(row, col) {\r\n        this.clearTimers();\r\n\r\n        if (startNodeCol === col && startNodeRow === row) {\r\n            this.setState({startSelected: true, mouseIsPressed: true});\r\n            return;\r\n        }\r\n        if (finishNodeCol === col && finishNodeRow === row) {\r\n            this.setState({finishSelected: true, mouseIsPressed: true});\r\n            return;\r\n        }\r\n\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n        if (this.state.ranAlgorithm)\r\n            this.visualizeInstantAlgorithm();\r\n\r\n    }\r\n\r\n    handleStartChanged(row, col) {\r\n        const prevStartNodeRow = startNodeRow;\r\n        const prevStartNodeCol = startNodeCol;\r\n        const {grid} = this.state;\r\n        if (grid[row][col].isWall)\r\n            return;\r\n\r\n        startNodeRow = row;\r\n        startNodeCol = col;\r\n\r\n        grid[prevStartNodeRow][prevStartNodeCol].isStart = false;\r\n        grid[startNodeRow][startNodeCol].isStart = true;\r\n\r\n\r\n        this.setState({grid: grid});\r\n\r\n        if (this.state.ranAlgorithm) {\r\n            this.visualizeInstantAlgorithm();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleFinishChanged(row, col) {\r\n        const prevFinishNodeRow = finishNodeRow;\r\n        const prevFinishNodeCol = finishNodeCol;\r\n        const {grid} = this.state;\r\n        if (grid[row][col].isWall)\r\n            return;\r\n        finishNodeRow = row;\r\n        finishNodeCol = col;\r\n\r\n\r\n        grid[prevFinishNodeRow][prevFinishNodeCol].isFinish = false;\r\n        grid[finishNodeRow][finishNodeCol].isFinish = true;\r\n\r\n        this.setState({grid: grid});\r\n\r\n        if (this.state.ranAlgorithm) {\r\n            this.visualizeInstantAlgorithm();\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n\r\n        const {grid, ranAlgorithm} = this.state;\r\n\r\n        if (this.state.startSelected) {\r\n            this.handleStartChanged(row, col);\r\n            return;\r\n        }\r\n\r\n        if (this.state.finishSelected) {\r\n            this.handleFinishChanged(row, col);\r\n            return;\r\n        }\r\n\r\n        // Make sure that we dont put a wall over the start or finish node\r\n        if (!(row === startNodeRow && col === startNodeCol) && !(row === finishNodeRow && col === finishNodeCol)) {\r\n            const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n            this.setState({grid: newGrid});\r\n\r\n            if (ranAlgorithm) {\r\n                this.visualizeInstantAlgorithm();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false, startSelected: false, finishSelected: false});\r\n    }\r\n\r\n    timers = [];\r\n    shortestPathTimers = [];\r\n\r\n    clearTimers(){\r\n        for(let i = 0; i < this.timers.length; i++){\r\n            clearTimeout(this.timers[i]);\r\n        }\r\n        for(let i = 0; i < this.shortestPathTimers.length; i++){\r\n            clearTimeout(this.shortestPathTimers[i]);\r\n        }\r\n\r\n        this.timers = [];\r\n        this.shortestPathTimers = [];\r\n    }\r\n\r\n    animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        this.clearTimers();\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n                if (i === visitedNodesInOrder.length) {\r\n                    this.timers.push(setTimeout(() => {\r\n                        this.animateShortestPath(nodesInShortestPathOrder);\r\n                    }, 10 * i * this.getSpeed()));\r\n                    return;\r\n                }\r\n                this.timers.push(setTimeout(() => {\r\n                    const node = visitedNodesInOrder[i];\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                        'node node-visited';\r\n                }, 10 * i * this.getSpeed()));\r\n        }\r\n    }\r\n\r\n    animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                this.animateInstantShortestPath(nodesInShortestPathOrder);\r\n                return;\r\n            }\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node visitedInstant';\r\n\r\n        }\r\n    }\r\n\r\n    animateInstantShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-instant-shortest-path';\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n              this.shortestPathTimers.push(setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n            }, 50 * i * this.getSpeed()));\r\n        }\r\n    }\r\n\r\n    getSpeed() {\r\n        let multiplier = 1.0;\r\n        const {speed} = this.state;\r\n\r\n        if (speed === 'Fast')\r\n            multiplier = 0.5;\r\n\r\n        if (speed === 'Slow')\r\n            multiplier = 2;\r\n\r\n        return multiplier;\r\n\r\n    }\r\n\r\n    visualizeAlgorithm() {\r\n        const {grid, selectedAlgorithm, allowDiagonals} = this.state;\r\n        clearGrid(grid);\r\n        const newGrid = resetGrid(grid);\r\n        const startNode = newGrid[startNodeRow][startNodeCol];\r\n        const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n\r\n        const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm, allowDiagonals);\r\n        const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n        this.animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        this.setState({ranAlgorithm: true});\r\n    }\r\n\r\n    generateWeights() {\r\n        const newGrid = this.state.grid.slice();\r\n        for (let i = 0; i < NUMBER_OF_ROWS; i++) {\r\n            for (let j = 0; j < NUMBER_OF_COLS; j++) {\r\n                if (Math.random() < 0.1) {\r\n                    newGrid[i][j].weight = Math.round(1 + Math.random() * 8);\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: newGrid});\r\n\r\n    }\r\n\r\n    diagonalMovementsChanged() {\r\n        this.setState(prevState => {\r\n           return {allowDiagonals: !prevState.allowDiagonals}\r\n        }, () => {\r\n            if(this.state.ranAlgorithm){\r\n                this.clearTimers();\r\n                this.visualizeInstantAlgorithm();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    visualizeInstantAlgorithm() {\r\n        const {grid, selectedAlgorithm, allowDiagonals} = this.state;\r\n        clearGrid(grid);\r\n        const newGrid = resetGrid(grid)\r\n\r\n        const startNode = newGrid[startNodeRow][startNodeCol];\r\n        const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n        const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm, allowDiagonals);\r\n        const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n        this.animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    clearBoard() {\r\n        const grid = getInitialGrid();\r\n        const ranAlgorithm = false;\r\n        this.setState({grid, ranAlgorithm});\r\n        this.clearTimers();\r\n        clearGrid(grid);\r\n\r\n    }\r\n\r\n    setSpeed(speed) {\r\n        this.setState({speed});\r\n    }\r\n\r\n    render() {\r\n        const {grid, mouseIsPressed, selectedAlgorithm} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"header\" style={{backgroundColor: 'gray'}}>\r\n                    <div className=\"item form-group\" style={{flexGrow: 2}}>\r\n                        <select className=\"form-control w-75 mt-3   float-right \" value={selectedAlgorithm}\r\n                                onChange={event => {\r\n                                    this.setState({selectedAlgorithm: event.target.value})\r\n                                }}\r\n                                id=\"selectedAlgorithm\">\r\n                            <option value=\"dijkstra\">Dijkstra's algorithm</option>\r\n                            <option value=\"aStar\">A* algorithm</option>\r\n                            <option value=\"greedyBestFirstSearch\">Greedy Best-first Search</option>\r\n                            <option value=\"breadthFirstSearch\">Breadth-first Search</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"item form-check\">\r\n                        <label htmlFor=\"allowDiagonals\" className=\"mt-4 ml-4 text-white-50\" style={{userSelect: 'none', fontSize:'18px'}}>\r\n                            <input className=\"form-check-item \" style={{width:'18px', height:'18px'}} type=\"checkbox\"\r\n                                   id=\"allowDiagonals\"\r\n                                   value={this.state.allowDiagonals}\r\n                                   onChange={() => this.diagonalMovementsChanged()}  />\r\n                            Allow diagonals\r\n                        </label>\r\n\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-success ml-3 mt-3 float-left\"\r\n                                onClick={() => this.visualizeAlgorithm()}>\r\n                            Visualize Algorithm\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-primary mr-3 mt-3 float-right\"\r\n                                onClick={() => this.generateWeights()}>Generate weights\r\n                        </button>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"item\">\r\n                        <button className=\"btn btn-danger mt-3 mr-5\" onClick={() => this.clearBoard()}>\r\n                            Clear board\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"item mt-3 ml-5\" style={{width: '200px', maxWidth: '200px'}}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n                                Speed: {this.state.speed}\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu className=\"bg-dark\">\r\n                                <Dropdown.Item className=\"text-danger\"\r\n                                               onClick={() => this.setSpeed('Fast')}>Fast</Dropdown.Item>\r\n                                <Dropdown.Item className=\"text-success\"\r\n                                               onClick={() => this.setSpeed('Normal')}>Normal</Dropdown.Item>\r\n                                <Dropdown.Item className=\"text-primary\"\r\n                                               onClick={() => this.setSpeed('Slow')}>Slow</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"d-flex justify-content-center p-2\">\r\n                    <div className=\"node node-start  mr-2\"></div>\r\n                    <div>Start Node</div>\r\n\r\n                    <div className=\"node node-finish ml-5 mr-2\"></div>\r\n                    <div>Finish Node</div>\r\n\r\n                    <div className=\"node node-instant-shortest-path ml-5 mr-2\"></div>\r\n                    <div>Shortest-path Node</div>\r\n\r\n                    <div className=\"node ml-5 mr-2\"></div>\r\n                    <div>Unvisited Node</div>\r\n\r\n                    <div className=\"node ml-5 mr-2\" style={{backgroundColor: 'rgba(0, 190, 218, 0.75)'}}></div>\r\n                    <div>Visited Node</div>\r\n\r\n                    <div className=\"node node-wall ml-5 mr-2\"></div>\r\n                    <div>Wall Node</div>\r\n                </div>\r\n\r\n                {\r\n                    this.state.allowDiagonals ?\r\n                <span className=\"d-flex justify-content-center\">\r\n                    <span className={\"mt-3 text-danger\"} style={{fontSize: '20px'}}>\r\n                        Note that algorithms are currently ignoring weights when diagonal movement is enabled.</span>\r\n                </span> :\r\n                        // DONT ASK xD\r\n                    <div>\r\n                        <div style={{fontSize: '14.5px'}}>&nbsp;</div>\r\n                        <div>&nbsp;</div>\r\n                    </div>\r\n                }\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col, isFinish, isStart, isWall, weight, isVisited} = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            weight={weight}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            isVisited={isVisited}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                            row={row}></Node>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n    const isStart = row === startNodeRow && col === startNodeCol;\r\n    const isFinish = row === finishNodeRow && col === finishNodeCol;\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: isStart,\r\n        isFinish: isFinish,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        weight: 1,\r\n        fScore: Infinity,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n\r\n\r\nconst resetGrid = grid => {\r\n    const newGrid = grid.slice();\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            newGrid[row][col].distance = Infinity;\r\n            newGrid[row][col].fScore = Infinity;\r\n            newGrid[row][col].previousNode = null;\r\n            newGrid[row][col].isVisited = false;\r\n        }\r\n    }\r\n\r\n    return newGrid;\r\n}\r\n\r\nconst clearGrid = grid => {\r\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n        for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n            let className = 'node';\r\n\r\n            if (row === startNodeRow && col === startNodeCol)\r\n                className = 'node node-start';\r\n\r\n            if (row === finishNodeRow && col === finishNodeCol)\r\n                className = 'node node-finish';\r\n\r\n            if (grid[row][col].isWall) {\r\n                className = 'node node-wall';\r\n            }\r\n\r\n\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n                className;\r\n        }\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <PathFindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}