{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/GraphHelper.js","Algorithms/Dijkstra.js","Algorithms/AStar.js","Algorithms/AlgorithmController.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","weight","isWall","onMouseDown","onMouseEnter","onMouseUp","row","isVisited","extraClassName","id","className","document","getElementById","Component","GraphHelper","node","grid","neighbors","push","length","filter","neighbor","nodes","unvisitedNodes","sort","nodeA","nodeB","distance","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","temp","sortNodesByFScore","fScore","heuristic","startNode","dRow","dCol","Math","abs","AlgorithmController","algorithm","visitedNodesInOrder","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","dijkstra","aStar","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","state","mouseIsPressed","startSelected","finishSelected","ranAlgorithm","selectedAlgorithm","speed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","visualizeInstantAlgorithm","prevStartNodeRow","prevStartNodeCol","prevFinishNodeRow","prevFinishNodeCol","handleStartChanged","handleFinishChanged","i","setTimeout","animateShortestPath","getSpeed","animateInstantShortestPath","multiplier","clearGrid","resetGrid","runAlgorithm","getNodesInShortestPathOrder","animateSearchSpace","slice","j","random","round","animateInstantAlgorithm","style","backgroundColor","flexGrow","value","onChange","event","target","onClick","visualizeAlgorithm","generateWeights","clearBoard","width","maxWidth","Dropdown","Toggle","variant","Menu","Item","setSpeed","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc73d566.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      weight,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                : '';\r\n\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={isVisited ? document.getElementById(`node-${row}-${col}`).className : `node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>{ weight > 1 ? weight : ''}&nbsp; </div>\r\n    );\r\n  }\r\n}","export default class GraphHelper {\r\n\r\n    static getUnvisitedNeighbors(node, grid) {\r\n        const neighbors = [];\r\n        const {col, row} = node;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    static getAllNodes(grid){\r\n        const nodes = [];\r\n        for(const row of grid){\r\n            for(const node of row){\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    static sortNodesByDistance(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        GraphHelper.sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n         if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid){\r\n    const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n\r\n         const temp = node.distance + neighbor.weight;\r\n         if(temp < neighbor.distance) {\r\n             neighbor.distance = temp;\r\n             neighbor.previousNode = node;\r\n         }\r\n        //For unweighted graphs, basically breadth first search.\r\n       // neighbor.distance = node.distance + 1;\r\n       // neighbor.previousNode = node;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\nexport function aStar(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.distance = 0;\r\n    startNode.fScore = 0;\r\n\r\n    const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByFScore(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.fScore === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) {\r\n            return visitedNodesInOrder;\r\n        }\r\n\r\n        updateUnvisitedNeighbors(closestNode, finishNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByFScore(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) =>\r\n    {\r\n        // This is a tie breaker if both scores are equal we should priorities the path with the most progress.\r\n        if(nodeA.fScore - nodeB.fScore === 0){\r\n            return nodeB.distance - nodeA.distance;\r\n        }\r\n        return nodeA.fScore - nodeB.fScore;\r\n    });\r\n}\r\n\r\nfunction heuristic(startNode, finishNode){\r\n       const dRow =  startNode.row - finishNode.row;\r\n       const dCol =  startNode.col - finishNode.col;\r\n       return Math.abs(dRow) + Math.abs(dCol);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, finishNode, grid){\r\n    const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        const temp = node.distance + neighbor.weight;\r\n        if ( temp < neighbor.distance) {\r\n            neighbor.distance = temp;\r\n            neighbor.fScore = temp + heuristic(neighbor, finishNode);\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}","import {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\r\nimport {aStar} from '../Algorithms/AStar';\r\nexport default class AlgorithmController {\r\n\r\n    static runAlgorithm(grid, startNode, finishNode, algorithm){\r\n        switch(algorithm){\r\n            case 'dijkstra':\r\n               return dijkstra(grid, startNode, finishNode);\r\n\r\n            case 'aStar':\r\n                return aStar(grid, startNode, finishNode);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './PathFindingVisualizer.css';\r\nimport AlgorithmController from '../Algorithms/AlgorithmController';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\nlet startNodeRow = 10;\r\nlet startNodeCol = 15;\r\nlet finishNodeRow = 10;\r\nlet finishNodeCol = 35;\r\nconst NUMBER_OF_ROWS = 20;\r\nconst NUMBER_OF_COLS = 50;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startSelected: false,\r\n      finishSelected: false,\r\n      ranAlgorithm: false,\r\n      selectedAlgorithm: 'dijkstra',\r\n      speed: 'Normal'\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n\r\n  handleMouseDown(row, col) {\r\n    if(startNodeCol === col && startNodeRow === row){\r\n      this.setState({startSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n    if(finishNodeCol === col && finishNodeRow === row){\r\n      this.setState({finishSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n    if(this.state.ranAlgorithm)\r\n      this.visualizeInstantAlgorithm();\r\n\r\n  }\r\n\r\n   handleStartChanged(row, col){\r\n    const prevStartNodeRow = startNodeRow;\r\n    const prevStartNodeCol = startNodeCol;\r\n     const {grid} = this.state;\r\n      if(grid[row][col].isWall)\r\n        return;\r\n\r\n        startNodeRow = row;\r\n        startNodeCol = col;\r\n\r\n          grid[prevStartNodeRow][prevStartNodeCol].isStart = false;\r\n          grid[startNodeRow][startNodeCol].isStart = true;\r\n\r\n\r\n          this.setState({grid: grid});\r\n\r\n     if(this.state.ranAlgorithm) {\r\n       this.visualizeInstantAlgorithm();\r\n     }\r\n\r\n\r\n   }\r\n\r\n  handleFinishChanged(row, col){\r\n    const prevFinishNodeRow = finishNodeRow;\r\n    const prevFinishNodeCol = finishNodeCol;\r\n    const {grid} = this.state;\r\n    if(grid[row][col].isWall)\r\n      return;\r\n    finishNodeRow = row;\r\n    finishNodeCol = col;\r\n\r\n\r\n      grid[prevFinishNodeRow][prevFinishNodeCol].isFinish = false;\r\n      grid[finishNodeRow][finishNodeCol].isFinish = true;\r\n\r\n      this.setState({grid: grid});\r\n\r\n    if(this.state.ranAlgorithm) {\r\n      this.visualizeInstantAlgorithm();\r\n    }\r\n\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    const {grid, ranAlgorithm} = this.state;\r\n\r\n    if(this.state.startSelected){\r\n        this.handleStartChanged(row, col);\r\n      return;\r\n    }\r\n\r\n    if(this.state.finishSelected){\r\n      this.handleFinishChanged(row, col);\r\n      return;\r\n    }\r\n\r\n    // Make sure that we dont put a wall over the start or finish node\r\n      if(!(row === startNodeRow && col == startNodeCol) && !(row === finishNodeRow && col === finishNodeCol) ) {\r\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n        this.setState({grid: newGrid});\r\n\r\n        if (ranAlgorithm) {\r\n          this.visualizeInstantAlgorithm();\r\n        }\r\n      }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false, startSelected: false, finishSelected: false});\r\n  }\r\n\r\n\r\n  animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i * this.getSpeed());\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n      }, 10 * i * this.getSpeed());\r\n    }\r\n  }\r\n\r\n  animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder){\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n          this.animateInstantShortestPath(nodesInShortestPathOrder);\r\n        return;\r\n      }\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node visitedInstant';\r\n\r\n    }\r\n  }\r\n\r\n  animateInstantShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-instant-shortest-path';\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n      }, 50 * i * this.getSpeed());\r\n    }\r\n  }\r\n\r\n  getSpeed(){\r\n    let multiplier = 1.0;\r\n    const {speed} = this.state;\r\n\r\n    if(speed === 'Fast')\r\n      multiplier = 0.5;\r\n\r\n    if(speed === 'Slow')\r\n      multiplier = 2;\r\n\r\n    return multiplier;\r\n\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    const {grid, selectedAlgorithm} = this.state;\r\n    clearGrid(grid);\r\n    const newGrid = resetGrid(grid);\r\n    const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n\r\n    const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n    const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n    this.animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.setState({ranAlgorithm: true});\r\n  }\r\n\r\n    generateWeights() {\r\n      const newGrid = this.state.grid.slice();\r\n        for(let i = 0; i < NUMBER_OF_ROWS; i++){\r\n          for(let j = 0; j < NUMBER_OF_COLS; j++){\r\n            if(Math.random() < 0.1){\r\n              newGrid[i][j].weight = Math.round(1 + Math.random() * 8);\r\n            }\r\n          }\r\n      }\r\n      this.setState({grid: newGrid});\r\n\r\n  }\r\n\r\n  visualizeInstantAlgorithm() {\r\n    const {grid, selectedAlgorithm} = this.state;\r\n     clearGrid(grid);\r\n    const newGrid = resetGrid(grid)\r\n\r\n      const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n    const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n    this.animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  clearBoard(){\r\n    const grid = getInitialGrid();\r\n    const ranAlgorithm = false;\r\n\r\n    this.setState({grid, ranAlgorithm});\r\n    clearGrid(grid);\r\n\r\n  }\r\n\r\n  setSpeed(speed){\r\n    this.setState({speed});\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed, selectedAlgorithm} = this.state;\r\n\r\n    return (\r\n        <>\r\n          <div className=\"header\" style={{backgroundColor: 'gray'}}>\r\n            <div className=\"item form-group\" style={{flexGrow: 2}}>\r\n            <select className=\"form-control w-50 mt-3   float-right \" value={selectedAlgorithm}\r\n                    onChange={event => {\r\n                      this.setState({selectedAlgorithm: event.target.value})\r\n                    }}\r\n                    id=\"selectedAlgorithm\">\r\n              <option value=\"dijkstra\">Dijkstra's algorithm</option>\r\n              <option value=\"aStar\">A* algorithm</option>\r\n            </select>\r\n          </div>\r\n            <div className=\"item\">\r\n          <button className=\"btn btn-success ml-3 mt-3 float-left\"  onClick={() => this.visualizeAlgorithm()}>\r\n            Visualize Algorithm\r\n          </button>\r\n          </div>\r\n\r\n            <div className=\"item\">\r\n              <button className=\"btn btn-primary mr-3 mt-3 float-right\" onClick={() => this.generateWeights()}>Generate weights</button>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"item\">\r\n              <button className=\"btn btn-danger mt-3 mr-5\" onClick={() => this.clearBoard()}>Clear board</button>\r\n            </div>\r\n            <div className=\"item mt-3 ml-5\" style={{width: '200px' , maxWidth: '200px'}}>\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n                Speed: {this.state.speed}\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu className=\"bg-dark\">\r\n                <Dropdown.Item className=\"text-danger\" onClick={() => this.setSpeed('Fast')}>Fast</Dropdown.Item>\r\n                <Dropdown.Item className=\"text-success\" onClick={() => this.setSpeed('Normal')}>Normal</Dropdown.Item>\r\n                <Dropdown.Item className=\"text-primary\" onClick={() => this.setSpeed('Slow')}>Slow</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          </div>\r\n\r\n\r\n\r\n\r\n          <div className=\"d-flex justify-content-center p-2\">\r\n            <div className=\"node node-start  mr-2\"></div>\r\n            <div>Start Node</div>\r\n\r\n            <div className=\"node node-finish ml-5 mr-2\"></div>\r\n            <div>Finish Node</div>\r\n\r\n            <div className=\"node node-instant-shortest-path ml-5 mr-2\"></div>\r\n            <div>Shortest-path Node</div>\r\n\r\n            <div className=\"node ml-5 mr-2\"></div>\r\n            <div>Unvisited Node</div>\r\n\r\n            <div className=\"node ml-5 mr-2\" style={{backgroundColor: 'rgba(0, 190, 218, 0.75)'}}> </div>\r\n            <div>Visited Node</div>\r\n\r\n            <div className=\"node node-wall ml-5 mr-2\"></div>\r\n            <div>Wall Node</div>\r\n          </div>\r\n\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall, weight, isVisited} = node;\r\n                      return (\r\n                          <Node\r\n                              key={nodeIdx}\r\n                              col={col}\r\n                              weight={weight}\r\n                              isFinish={isFinish}\r\n                              isStart={isStart}\r\n                              isWall={isWall}\r\n                              isVisited={isVisited}\r\n                              mouseIsPressed={mouseIsPressed}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) =>\r\n                                  this.handleMouseEnter(row, col)\r\n                              }\r\n                              onMouseUp={() => this.handleMouseUp()}\r\n                              row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  const isStart = row === startNodeRow && col === startNodeCol;\r\n  const isFinish = row === finishNodeRow && col === finishNodeCol;\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: isStart,\r\n    isFinish: isFinish,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    weight:  1,\r\n    fScore: Infinity,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n\r\n\r\nconst resetGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      newGrid[row][col].distance = Infinity;\r\n      newGrid[row][col].fScore = Infinity;\r\n      newGrid[row][col].previousNode = null;\r\n      newGrid[row][col].isVisited = false;\r\n    }\r\n  }\r\n\r\n  return newGrid;\r\n}\r\n\r\nconst clearGrid = grid => {\r\n\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      let className = 'node';\r\n\r\n      if(row === startNodeRow && col === startNodeCol)\r\n        className = 'node node-start';\r\n\r\n      if(row === finishNodeRow && col === finishNodeCol)\r\n        className = 'node node-finish';\r\n\r\n      if(grid[row][col].isWall){\r\n        className = 'node node-wall';\r\n      }\r\n\r\n\r\n      document.getElementById(`node-${row}-${col}`).className =\r\n          className;\r\n    }\r\n  }\r\n\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <PathFindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}