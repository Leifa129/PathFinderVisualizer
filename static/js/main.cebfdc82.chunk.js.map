{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/GraphHelper.js","Algorithms/Dijkstra.js","Algorithms/AStar.js","Algorithms/AlgorithmController.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","weight","isWall","onMouseDown","onMouseEnter","onMouseUp","row","isVisited","extraClassName","id","className","document","getElementById","Component","GraphHelper","node","grid","neighbors","push","length","filter","neighbor","nodes","unvisitedNodes","sort","nodeA","nodeB","distance","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","temp","heuristic","startNode","dRow","dCol","Math","abs","AlgorithmController","algorithm","visitedNodesInOrder","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","dijkstra","aStar","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","state","mouseIsPressed","startSelected","finishSelected","ranAlgorithm","selectedAlgorithm","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","visualizeInstantAlgorithm","prevStartNodeRow","prevStartNodeCol","prevFinishNodeRow","prevFinishNodeCol","handleStartChanged","handleFinishChanged","i","setTimeout","animateShortestPath","animateInstantShortestPath","clearGrid","resetGrid","runAlgorithm","getNodesInShortestPathOrder","animateSearchSpace","slice","j","random","round","animateInstantAlgorithm","onClick","visualizeAlgorithm","value","onChange","event","target","generateWeights","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cebfdc82.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      weight,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n      isVisited,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                : '';\r\n\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={isVisited ? document.getElementById(`node-${row}-${col}`).className : `node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>{ weight > 1 ? weight : ''}&nbsp; </div>\r\n    );\r\n  }\r\n}","export default class GraphHelper {\r\n\r\n    static getUnvisitedNeighbors(node, grid) {\r\n        const neighbors = [];\r\n        const {col, row} = node;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    static getAllNodes(grid){\r\n        const nodes = [];\r\n        for(const row of grid){\r\n            for(const node of row){\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    static sortNodesByDistance(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        GraphHelper.sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n         if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid){\r\n    const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n\r\n         const temp = node.distance + neighbor.weight;\r\n         if(temp < neighbor.distance) {\r\n             neighbor.distance = temp;\r\n             neighbor.previousNode = node;\r\n         }\r\n        //For unweighted graphs, basically breadth first search.\r\n       // neighbor.distance = node.distance + 1;\r\n       // neighbor.previousNode = node;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\nexport function aStar(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.distance =  heuristic(startNode, finishNode);\r\n\r\n    const unvisitedNodes = GraphHelper.getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        GraphHelper.sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) {\r\n           // console.log(closestNode.weight + closestNode.previousNode.distance);\r\n            return visitedNodesInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closestNode, finishNode, grid);\r\n    }\r\n}\r\n\r\n// Find how many walls there are in path maybe\r\nfunction heuristic(startNode, finishNode){\r\n       const dRow = finishNode.row - startNode.row;\r\n       const dCol = finishNode.col - startNode.col;\r\n       return Math.abs(dRow) + Math.abs(dCol);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, finishNode, grid){\r\n    const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n\r\n        const temp = neighbor.weight + heuristic(neighbor, finishNode);\r\n        if (temp < neighbor.distance) {\r\n            neighbor.distance = temp;\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}","import {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\r\nimport {aStar} from '../Algorithms/AStar';\r\nexport default class AlgorithmController {\r\n\r\n    static runAlgorithm(grid, startNode, finishNode, algorithm){\r\n        switch(algorithm){\r\n            case 'dijkstra':\r\n               return dijkstra(grid, startNode, finishNode);\r\n\r\n            case 'aStar':\r\n                return aStar(grid, startNode, finishNode);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './PathFindingVisualizer.css';\r\nimport AlgorithmController from '../Algorithms/AlgorithmController';\r\n\r\nlet startNodeRow = 10;\r\nlet startNodeCol = 15;\r\nlet finishNodeRow = 10;\r\nlet finishNodeCol = 35;\r\nconst NUMBER_OF_ROWS = 20;\r\nconst NUMBER_OF_COLS = 50;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startSelected: false,\r\n      finishSelected: false,\r\n      ranAlgorithm: false,\r\n      selectedAlgorithm: 'dijkstra',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n\r\n  handleMouseDown(row, col) {\r\n    if(startNodeCol === col && startNodeRow === row){\r\n      this.setState({startSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n    if(finishNodeCol === col && finishNodeRow === row){\r\n      this.setState({finishSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n    if(this.state.ranAlgorithm)\r\n      this.visualizeInstantAlgorithm();\r\n\r\n  }\r\n\r\n   handleStartChanged(row, col){\r\n    const prevStartNodeRow = startNodeRow;\r\n    const prevStartNodeCol = startNodeCol;\r\n     const {grid} = this.state;\r\n      if(grid[row][col].isWall)\r\n        return;\r\n\r\n        startNodeRow = row;\r\n        startNodeCol = col;\r\n\r\n          grid[prevStartNodeRow][prevStartNodeCol].isStart = false;\r\n          grid[startNodeRow][startNodeCol].isStart = true;\r\n\r\n\r\n          this.setState({grid: grid});\r\n\r\n     if(this.state.ranAlgorithm) {\r\n       this.visualizeInstantAlgorithm();\r\n     }\r\n\r\n\r\n   }\r\n\r\n  handleFinishChanged(row, col){\r\n    const prevFinishNodeRow = finishNodeRow;\r\n    const prevFinishNodeCol = finishNodeCol;\r\n    const {grid} = this.state;\r\n    if(grid[row][col].isWall)\r\n      return;\r\n    finishNodeRow = row;\r\n    finishNodeCol = col;\r\n\r\n\r\n      grid[prevFinishNodeRow][prevFinishNodeCol].isFinish = false;\r\n      grid[finishNodeRow][finishNodeCol].isFinish = true;\r\n\r\n      this.setState({grid: grid});\r\n\r\n    if(this.state.ranAlgorithm) {\r\n      this.visualizeInstantAlgorithm();\r\n    }\r\n\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    const {grid, ranAlgorithm} = this.state;\r\n\r\n    if(this.state.startSelected){\r\n        this.handleStartChanged(row, col);\r\n      return;\r\n    }\r\n\r\n    if(this.state.finishSelected){\r\n      this.handleFinishChanged(row, col);\r\n      return;\r\n    }\r\n\r\n    // Make sure that we dont put a wall over the start or finish node\r\n      if(!(row === startNodeRow && col == startNodeCol) && !(row === finishNodeRow && col === finishNodeCol) ) {\r\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n        this.setState({grid: newGrid});\r\n\r\n        if (ranAlgorithm) {\r\n          this.visualizeInstantAlgorithm();\r\n        }\r\n      }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false, startSelected: false, finishSelected: false});\r\n  }\r\n\r\n\r\n  animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder){\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n          this.animateInstantShortestPath(nodesInShortestPathOrder);\r\n        return;\r\n      }\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node visitedInstant';\r\n\r\n    }\r\n  }\r\n\r\n  animateInstantShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-instant-shortest-path';\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    const {grid, selectedAlgorithm} = this.state;\r\n    clearGrid(grid);\r\n    const newGrid = resetGrid(grid);\r\n    const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n\r\n    const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n    const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n    this.animateSearchSpace(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.setState({ranAlgorithm: true});\r\n  }\r\n\r\n    generateWeights() {\r\n      const newGrid = this.state.grid.slice();\r\n        for(let i = 0; i < NUMBER_OF_ROWS; i++){\r\n          for(let j = 0; j < NUMBER_OF_COLS; j++){\r\n            if(Math.random() < 0.1){\r\n              newGrid[i][j].weight = Math.round(1 + Math.random() * 8);\r\n            }\r\n          }\r\n      }\r\n      this.setState({grid: newGrid});\r\n\r\n  }\r\n\r\n  visualizeInstantAlgorithm() {\r\n    const {grid, selectedAlgorithm} = this.state;\r\n     clearGrid(grid);\r\n    const newGrid = resetGrid(grid)\r\n\r\n      const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = AlgorithmController.runAlgorithm(newGrid, startNode, finishNode, selectedAlgorithm);\r\n    const nodesInShortestPathOrder = AlgorithmController.getNodesInShortestPathOrder(finishNode);\r\n    this.animateInstantAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed, selectedAlgorithm} = this.state;\r\n\r\n    return (\r\n        <>\r\n          <div className=\"header\">\r\n            <div className=\"item\">\r\n          <button className=\"btn btn-dark ml-3 mt-2\"  onClick={() => this.visualizeAlgorithm()}>\r\n            Visualize Algorithm\r\n          </button>\r\n          </div>\r\n            <div className=\"item form-group\">\r\n          <select className=\"form-control w-50 m-2\" value={selectedAlgorithm}\r\n                  onChange={event => {\r\n                    this.setState({selectedAlgorithm: event.target.value})\r\n                  }}\r\n                  id=\"selectedAlgorithm\">\r\n            <option value=\"dijkstra\">Dijkstra's algorithm</option>\r\n            <option value=\"aStar\">A* algorithm</option>\r\n          </select>\r\n          </div>\r\n            <div className=\"item\">\r\n              <button className=\"btn btn-primary mr-3 mt-2 float-right\" onClick={() => this.generateWeights()}>Generate weights</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall, weight, isVisited} = node;\r\n                      return (\r\n                          <Node\r\n                              key={nodeIdx}\r\n                              col={col}\r\n                              weight={weight}\r\n                              isFinish={isFinish}\r\n                              isStart={isStart}\r\n                              isWall={isWall}\r\n                              isVisited={isVisited}\r\n                              mouseIsPressed={mouseIsPressed}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) =>\r\n                                  this.handleMouseEnter(row, col)\r\n                              }\r\n                              onMouseUp={() => this.handleMouseUp()}\r\n                              row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  const isStart = row === startNodeRow && col === startNodeCol;\r\n  const isFinish = row === finishNodeRow && col === finishNodeCol;\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: isStart,\r\n    isFinish: isFinish,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    weight:  1,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n\r\n\r\nconst resetGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      newGrid[row][col].distance = Infinity;\r\n      newGrid[row][col].previousNode = null;\r\n      newGrid[row][col].isVisited = false;\r\n    }\r\n  }\r\n\r\n  return newGrid;\r\n}\r\n\r\nconst clearGrid = grid => {\r\n\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      let className = 'node';\r\n\r\n      if(row === startNodeRow && col === startNodeCol)\r\n        className = 'node node-start';\r\n\r\n      if(row === finishNodeRow && col === finishNodeCol)\r\n        className = 'node node-finish';\r\n\r\n      if(grid[row][col].isWall){\r\n        className = 'node node-wall';\r\n      }\r\n\r\n\r\n      document.getElementById(`node-${row}-${col}`).className =\r\n          className;\r\n    }\r\n  }\r\n\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <PathFindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}