{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/GraphHelper.js","Algorithms/Dijkstra.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","weight","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","GraphHelper","node","grid","neighbors","push","length","filter","neighbor","isVisited","nodes","unvisitedNodes","sort","nodeA","nodeB","distance","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","dijkstra","startNode","visitedNodesInOrder","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","temp","getNodesInShortestPathOrder","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","PathFindingVisualizer","state","mouseIsPressed","startSelected","finishSelected","ranAlgorithm","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","visualizeInstantDijkstra","prevStartNodeRow","prevStartNodeCol","prevFinishNodeRow","prevFinishNodeCol","handleStartChanged","handleFinishChanged","i","setTimeout","animateShortestPath","document","getElementById","animateInstantShortestPath","clearGrid","resetGrid","animateDijkstra","animateInstantDijkstra","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","Math","round","random","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87e1c4b3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      weight,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n                ? 'node-wall'\r\n                : '';\r\n\r\n    return (\r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp()}>{weight}</div>\r\n    );\r\n  }\r\n}","export default class GraphHelper {\r\n\r\n    static getUnvisitedNeighbors(node, grid) {\r\n        const neighbors = [];\r\n        const {col, row} = node;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    static getAllNodes(grid){\r\n        const nodes = [];\r\n        for(const row of grid){\r\n            for(const node of row){\r\n                nodes.push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    static sortNodesByDistance(unvisitedNodes){\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    }\r\n\r\n    static getNodesInShortestPathOrder(finishNode) {\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n\r\n\r\n}","import GraphHelper from \"./GraphHelper\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        // If we encounter a wall, we skip it.\r\n         if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid){\r\n    const unvisitedNeighbors = GraphHelper.getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n\r\n         const temp = node.distance + neighbor.weight;\r\n         if(temp < neighbor.distance) {\r\n             neighbor.distance = temp;\r\n             neighbor.previousNode = node;\r\n         }\r\n\r\n       // neighbor.distance = node.distance + 1;\r\n       // neighbor.previousNode = node;\r\n    }\r\n\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid){\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = [];\r\n    for(const row of grid){\r\n        for(const node of row){\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\r\n\r\nimport './PathFindingVisualizer.css';\r\n\r\nlet startNodeRow = 10;\r\nlet startNodeCol = 15;\r\nlet finishNodeRow = 10;\r\nlet finishNodeCol = 35;\r\nconst NUMBER_OF_ROWS = 20;\r\nconst NUMBER_OF_COLS = 50;\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startSelected: false,\r\n      finishSelected: false,\r\n      ranAlgorithm: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n\r\n  handleMouseDown(row, col) {\r\n    if(startNodeCol === col && startNodeRow === row){\r\n      this.setState({startSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n    if(finishNodeCol === col && finishNodeRow === row){\r\n      this.setState({finishSelected: true, mouseIsPressed: true});\r\n      return;\r\n    }\r\n\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n    if(this.state.ranAlgorithm)\r\n      this.visualizeInstantDijkstra();\r\n\r\n  }\r\n\r\n   handleStartChanged(row, col){\r\n    const prevStartNodeRow = startNodeRow;\r\n    const prevStartNodeCol = startNodeCol;\r\n     const {grid} = this.state;\r\n      if(grid[row][col].isWall)\r\n        return;\r\n\r\n        startNodeRow = row;\r\n        startNodeCol = col;\r\n\r\n        if(!this.state.ranAlgorithm) {\r\n          const {grid} = this.state;\r\n          grid[prevStartNodeRow][prevStartNodeCol].isStart = false;\r\n          grid[startNodeRow][startNodeCol].isStart = true;\r\n\r\n\r\n          this.setState({grid: grid});\r\n        }\r\n\r\n     else {\r\n       this.visualizeInstantDijkstra();\r\n     }\r\n\r\n\r\n   }\r\n\r\n  handleFinishChanged(row, col){\r\n    const prevFinishNodeRow = finishNodeRow;\r\n    const prevFinishNodeCol = finishNodeCol;\r\n    const {grid} = this.state;\r\n    if(grid[row][col].isWall)\r\n      return;\r\n    finishNodeRow = row;\r\n    finishNodeCol = col;\r\n\r\n    if(!this.state.ranAlgorithm) {\r\n      grid[prevFinishNodeRow][prevFinishNodeCol].isFinish = false;\r\n      grid[finishNodeRow][finishNodeCol].isFinish = true;\r\n\r\n      this.setState({grid: grid});\r\n    }\r\n\r\n    else {\r\n      this.visualizeInstantDijkstra();\r\n    }\r\n\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    const {grid, ranAlgorithm} = this.state;\r\n\r\n    if(this.state.startSelected){\r\n        this.handleStartChanged(row, col);\r\n      return;\r\n    }\r\n\r\n    if(this.state.finishSelected){\r\n      this.handleFinishChanged(row, col);\r\n      return;\r\n    }\r\n\r\n\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    this.setState({grid: newGrid});\r\n\r\n    if(ranAlgorithm){\r\n      this.visualizeInstantDijkstra();\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false, startSelected: false, finishSelected: false});\r\n  }\r\n\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateInstantDijkstra(visitedNodesInOrder, nodesInShortestPathOrder){\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n          this.animateInstantShortestPath(nodesInShortestPathOrder);\r\n        return;\r\n      }\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node visitedInstant';\r\n\r\n    }\r\n  }\r\n\r\n  animateInstantShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-instant-shortest-path';\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    clearGrid(grid);\r\n    const newGrid = resetGrid(grid)\r\n    const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = dijkstra(newGrid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    this.setState({ranAlgorithm: true});\r\n  }\r\n\r\n  visualizeInstantDijkstra() {\r\n    const {grid} = this.state;\r\n     clearGrid(grid);\r\n    const newGrid = resetGrid(grid)\r\n\r\n      const startNode = newGrid[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = dijkstra(newGrid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateInstantDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n        <>\r\n          <button onClick={() => this.visualizeDijkstra()}>\r\n            Visualize Dijkstra's Algorithm\r\n          </button>\r\n          <div className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                  <div key={rowIdx}>\r\n                    {row.map((node, nodeIdx) => {\r\n                      const {row, col, isFinish, isStart, isWall, weight} = node;\r\n                      return (\r\n                          <Node\r\n                              key={nodeIdx}\r\n                              col={col}\r\n                              weight={weight}\r\n                              isFinish={isFinish}\r\n                              isStart={isStart}\r\n                              isWall={isWall}\r\n                              mouseIsPressed={mouseIsPressed}\r\n                              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                              onMouseEnter={(row, col) =>\r\n                                  this.handleMouseEnter(row, col)\r\n                              }\r\n                              onMouseUp={() => this.handleMouseUp()}\r\n                              row={row}></Node>\r\n                      );\r\n                    })}\r\n                  </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  const isStart = row === startNodeRow && col === startNodeCol;\r\n  const isFinish = row === finishNodeRow && col === finishNodeCol;\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: isStart,\r\n    isFinish: isFinish,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    weight: isFinish || isStart ? 0 : 1 + Math.round( Math.random() * 8),\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n\r\n\r\nconst resetGrid = grid => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      newGrid[row][col].distance = Infinity;\r\n      newGrid[row][col].previousNode = null;\r\n      newGrid[row][col].isVisited = false;\r\n    }\r\n  }\r\n\r\n  return newGrid;\r\n}\r\n\r\nconst clearGrid = grid => {\r\n\r\n  for (let row = 0; row < NUMBER_OF_ROWS; row++) {\r\n    for (let col = 0; col < NUMBER_OF_COLS; col++) {\r\n      let className = 'node';\r\n\r\n      if(row === startNodeRow && col === startNodeCol)\r\n        className = 'node node-start';\r\n\r\n      if(row === finishNodeRow && col === finishNodeCol)\r\n        className = 'node node-finish';\r\n\r\n      if(grid[row][col].isWall){\r\n        className = 'node node-wall';\r\n      }\r\n\r\n\r\n      document.getElementById(`node-${row}-${col}`).className =\r\n          className;\r\n    }\r\n  }\r\n\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <PathFindingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}